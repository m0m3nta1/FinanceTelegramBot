import os
import json
import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = 'user_data.json'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_birthday = State()
    waiting_for_expense_name = State()
    waiting_for_expense_amount = State()
    waiting_for_income_amount = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª")
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", callback_data='add_expense')],
        [InlineKeyboardButton(text="üíµ –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data='add_income')],
        [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data='view_expenses')],
        [InlineKeyboardButton(text="‚ÑπÔ∏è About", callback_data='about')],
    ])
    return keyboard

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(message_or_query: types.Message | types.CallbackQuery, user_id: str):
    logger.info(f"–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è user_id: {user_id}")
    data = load_data()
    user_data = data.get(user_id, {})
    
    if not user_data:
        if isinstance(message_or_query, types.Message):
            await message_or_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        else:
            await message_or_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    try:
        birth_date = datetime.strptime(user_data['birthday'], '%d-%m-%y')
        now = datetime.now()
        next_birthday = birth_date.replace(year=now.year)
        if next_birthday < now:
            next_birthday = next_birthday.replace(year=now.year + 1)
        days_to_birthday = (next_birthday - now).days
    except:
        days_to_birthday = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
    current_month = datetime.now().month
    current_year = datetime.now().year
    monthly_expenses = sum(
        exp['amount'] for exp in user_data.get('expenses', [])
        if datetime.strptime(exp['date'], '%Y-%m-%d %H:%M:%S').month == current_month
        and datetime.strptime(exp['date'], '%Y-%m-%d %H:%M:%S').year == current_year
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üë§ {user_data['name']}\n"
        f"üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} ‚ÇΩ\n"
        f"üí∏ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü: {monthly_expenses} ‚ÇΩ\n"
        f"üéÇ –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {days_to_birthday} –¥–Ω–µ–π\n"
    )
    
    if isinstance(message_or_query, types.Message):
        await message_or_query.answer(message, reply_markup=get_profile_keyboard())
    else:
        await message_or_query.message.edit_text(message, reply_markup=get_profile_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(message: types.Message, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id in data:
        await show_profile(message, user_id)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(UserStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(message: types.Message, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    user_id = str(message.from_user.id)
    data = load_data()
    current_state = await state.get_state()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    
    if current_state == UserStates.waiting_for_name.state:
        await state.update_data(name=message.text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-90)")
        await state.set_state(UserStates.waiting_for_birthday)
    
    elif current_state == UserStates.waiting_for_birthday.state:
        try:
            birthday = datetime.strptime(message.text, '%d-%m-%y')
            user_data = await state.get_data()
            data[user_id] = {
                'name': user_data['name'],
                'birthday': message.text,
                'balance': 0,
                'expenses': [],
                'incomes': [],
                'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            save_data(data)
            await state.clear()
            await show_profile(message, user_id)
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01-01-90)")
    
    elif current_state == UserStates.waiting_for_expense_name.state:
        await state.update_data(expense_name=message.text)
        await message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —ç—Ç–æ –∫—É–ø–∏–ª–∏? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        await state.set_state(UserStates.waiting_for_expense_amount)
    
    elif current_state == UserStates.waiting_for_expense_amount.state:
        try:
            amount = float(message.text)
            user_data = data.get(user_id, {})
            expense_data = await state.get_data()
            
            new_expense = {
                'name': expense_data['expense_name'],
                'amount': amount,
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            user_data.setdefault('expenses', []).append(new_expense)
            user_data['balance'] = user_data.get('balance', 0) - amount
            data[user_id] = user_data
            save_data(data)
            
            await state.clear()
            await message.answer("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            await show_profile(message, user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")
    
    elif current_state == UserStates.waiting_for_income_amount.state:
        try:
            amount = float(message.text)
            user_data = data.get(user_id, {})
            
            new_income = {
                'amount': amount,
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            user_data.setdefault('incomes', []).append(new_income)
            user_data['balance'] = user_data.get('balance', 0) + amount
            data[user_id] = user_data
            save_data(data)
            
            await state.clear()
            await message.answer("–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            await show_profile(message, user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏")
    user_id = str(callback_query.from_user.id)
    data = callback_query.data
    
    if data == 'add_expense':
        await callback_query.message.edit_text("–ß—Ç–æ –≤—ã –∫—É–ø–∏–ª–∏?")
        await state.set_state(UserStates.waiting_for_expense_name)
    
    elif data == 'add_income':
        await callback_query.message.edit_text("–ö–∞–∫–∞—è —Å—É–º–º–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∞?")
        await state.set_state(UserStates.waiting_for_income_amount)
    
    elif data == 'view_expenses':
        await show_all_expenses(callback_query, user_id)
    
    elif data == 'about':
        await show_about(callback_query)
    
    elif data == 'back_to_profile':
        await show_profile(callback_query, user_id)
    
    elif data.startswith('expense_'):
        expense_id = int(data.split('_')[1])
        await show_expense_details(callback_query, user_id, expense_id)

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
async def show_all_expenses(callback_query: types.CallbackQuery, user_id: str):
    logger.info(f"–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è user_id: {user_id}")
    data = load_data()
    user_data = data.get(user_id, {})
    expenses = user_data.get('expenses', [])
    
    if not expenses:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_profile')]
        ])
        await callback_query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=keyboard)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{expense['name']} - {expense['amount']} ‚ÇΩ ({datetime.strptime(expense['date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')})",
            callback_data=f'expense_{i}'
        )] for i, expense in enumerate(expenses)
    ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_profile')])
    
    await callback_query.message.edit_text("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:", reply_markup=keyboard)

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞
async def show_expense_details(callback_query: types.CallbackQuery, user_id: str, expense_id: int):
    logger.info(f"–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è user_id: {user_id}, expense_id: {expense_id}")
    data = load_data()
    user_data = data.get(user_id, {})
    expenses = user_data.get('expenses', [])
    
    if expense_id >= len(expenses):
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞: —Ä–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    expense = expenses[expense_id]
    date = datetime.strptime(expense['date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
    message = (
        f"üõí –ü–æ–∫—É–ø–∫–∞: {expense['name']}\n"
        f"üí∏ –°—É–º–º–∞: {expense['amount']} ‚ÇΩ\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='view_expenses')]
    ])
    
    await callback_query.message.edit_text(message, reply_markup=keyboard)

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
async def show_about(callback_query: types.CallbackQuery):
    logger.info("–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
    message = (
        "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @BPOTEBAL\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data='back_to_profile')]
    ])
    
    await callback_query.message.edit_text(message, reply_markup=keyboard)

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    bot = Bot(token="7781361742:AAGUG7mDjjr5iCV14Q-jwA6IUAjMmiEJXk8")
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start, CommandStart())
    dp.message.register(handle_message)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.callback_query.register(button_handler)
    
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª–ª–∏–Ω–≥–∞")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())